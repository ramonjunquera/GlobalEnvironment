mInheritance

Novedades:
- Herencia múltiple. Derivación de varias clases base

Desarrollo:
  Crearemos dos clases base y una tercera que será derivada de las anteriores.
  Cuando se deriva una clase de más de una base, se combinan todos los métodos y variables de
  las bases.
  Shape
    La primera clase base será Shape que representa una forma geométrica.
    Mantiene en la sección protected un par de variables con las dimensiones.
    Tiene un constructor que asigna los parámetros a las variables protegidas.
  CostPaint
    Es una clase base sin constructor.
    No tiene variables.
    Sólo tiene un método que permite calcular el coste de pintar un área.
  Rect
    Las clases derivadas múltiples hacen separan las referencias a sus clases bases por comas.
    Es una clase derivada de Shape y CostPaint. Se declara como:
      class Rect : public Shape , public CostPaint
    Tiene un constructor similar al de Shape para guardar las dimensiones.
    Que se declara en rect.cpp para que pase el valor de los parámetros al constructor
    de Shape:
      Rect::Rect(int width,int height):Shape(width,height)
    El archivo de cabecera debe incluir las referencias a las librerías de las clases base:
      #include <shape.h>
      #include <costpaint.h>
    Añade un método para calcular el área.
    Gracias a Shape, podemos guardar las dimensiones en el constructor.
    Gracias a que las variables de Shape son protected, podemos definir un método para calcular su área.
    Gracias a CostPaint se le añade un mátodo para calcular el coste de pintar.
  main
    Incluimos la referencia a la clase Rect:
      #include <rect.h>
    Creamos un objeto Rect.
    Calculamos su área.
    Calculamos su coste.
    Incluimos la libreria iostream y el namespace std para usar cout.
    Mostramos los resultados
