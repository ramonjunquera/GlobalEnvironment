inheritance

Novedades:
- Creación de una clase derivada
- Llamadas a métodos de la clase base desde la derivada
- Llamadas a constructores de la clase base con y sin parámetros
- Destructores en clases derivadas

Desarrollo:
  Creamos una aplicación de línea de comandos.
  El principal objetivo es aprender a crear una clase derivada.
  Haremos varios ejemplos.
  En todos ellos crearemos una clase base llamada Rect (retángulo).
  Guardará las dimensiones del rectángulo (anchura y altura) en variables privadas.
  Tendrá un método para cálcular su área getArea().
  La tomaremos como clase base.
  La derivada será la clase Square (cuadrado).
  Un cuadrado es el rectángulo que tiene sus dos dimensiones iguales.
  Los distintos ejemplos mostrarán qué opciones pordemos tomar antes constructores.
  Para utilizar cout incluimos llamada a iostream y utilizamos el espacio de nombres estándar.

Ejemplo 1:
  Rect tiene definidas las dimensiones como enteros.
  No necesita constructores.
  Square no tiene ninguna dificultad.
Clase base:
  Creación
    Click con el botón derecho sobre el nombre del proyecto, Add New.../C++/C++ Class
    La clase se llamará Rect1
    Puesto que no deriva de ninguna otra, la clase base la dejaremos como custom.
    No incluiremos ninguna clase de objetos de Qt.
    Nos propone los nombres de los archivos de código (.cpp) y cabecera (.h) y los aceptaremos.
    También nos propone guardarlos en la carpeta del proyecto. Aceptaremos pulsado el botón Next.
  Constructor
    Es este ejemplo no lo necesitaremos. Eliminamos su definición del archivo de cabecera y del de
    código.
  Variables de dimensión
    Creamos la sección privada y añadimos las variables que guardarán la anchura y altura.
  Método de asignación de dimensiones
    Definimos el método setMeasures como público, que sólo guardará los valores pasados por
    parámetros en las variables privadas.
  Método de cálculo de área
    Definimos en método getArea como público. Devolverá el producto de las dimensiones.
    No tiene parámetros.
  Llamada en main.cpp
    Para poder utilizar esta clase debemos añadir a main.cpp esta referencia en la sección include:
      #include <rect1.h>
    Incluimos en main.cpp la creación de un objeto Rect1, la asignación de dimensiones y presentación
    del área.
Clase derivada:
  Creación
    Igual que antes, creamos una clase a través de menús.
    El nombre de la clase será Square1.
    Su clase base será Rect1
    El resto de parámetros los aceptamos.
    Si nos fijamos cómo se ha definido la clase en el archivo de cabecera, veremos que se ha añadido
    el nombre de la clase base:
      class Square1 : public Rect1
    Es muy importante añadir en la sección include del .h la referencia a la clase base:
      #include <rect1.h>
  Costructor
    Al igual que la clase base, no tiene. Eliminamos sus referencias.
  Métodos privados
    Actualmente la clase base tiene el método setMeasures como público.
    La clase derivada herederá el método con los mismos permisos.
    Pero no nos insteresa que la clase Square tenga este método como público, puesto que crearemos
    uno nuevo más simple. Por lo tanto, definimos la misma función con los mismos parámetros en
    la sección privada del archivo de cabecera.
    No añadimos nada al archivo de código porque no queremos cambiar su funcionalidad.
    Así sólo cambiamos los permisos del método.
  Dimensión
    Creamos un nuevo método público llamado setSide para asignar el valor del lado del cuadrado.
    Esto llama al método de asignar medidas de la clase base.
  Llamada en main.cpp
    Incluimos la llamada a la definición de la clase: #include <square1.h>
    Creamo un objeto Square1, asignamos el valor del lado y mostramos su área

Ejemplo 2:
  Similar al ejemplo anterior, pero ahora definimos constructores, tanto para la clase base como
  para la derivada, que permite pasarle los valores de dimensión los guarda en las variables
  privadas.
Clase base:
  Creación
    Utilizamos los menús para crear la clase Rect2
  Variables de dimensión
    Creamos la sección privada y añadimos las variables de anchura y altura.
  Constructor
    Modificamos el constructor por defecto incluyendo los parámetros de anchura y altura.
    En el .cpp las guardamos en las variables privadas.
  Método de cálculo de área
    Definimos en método getArea como público. Devolverá el producto de las dimensiones.
    No tiene parámetros.
  Llamada en main.cpp
    Para poder utilizar esta clase debemos añadir a main.cpp esta referencia en la sección include:
      #include <rect2.h>
    Incluimos en main.cpp la creación de un objeto Rect2, la asignación de dimensiones y presentación
    del área.
Clase derivada:
  Creación
    Igual que antes, creamos una clase a través de menús.
    El nombre de la clase será Square2.
    Su clase base será Rect2
    El resto de parámetros los aceptamos.
    Añadimos en el archivo de cabecera la referencia a la clase base:
      #include <rect2.h>
  Métodos privados
    Como en el caso anterior, redefinimos el método setMeasures como privado.
  Constructor
    Modificamos el constructor por defecto para que tenga el parámetro de "lado".
    En el .cpp añadimos a continuación de la declaración : nombre de la clase base (que coincide
    con el constructor de la clase base) y le pasamos los parámetros necesario.
    En este caso pasamos el valor del lado como anchura y altura.
    No necesitamos hacer nada más, porque hemos llamado al contructor de la clase base en la 
    propia declaración.
  Llamada en main.cpp
    Incluimos la llamada a la definición de la clase: #include <square2.h>
    Creamo un objeto Square2, asignamos el valor del lado y mostramos su área

Ejemplo 3:
  Rect tiene definidas las dimensiones como punteros de enteros.
  Necesita un constructor sin parámetros para reservar memoria para las variables privadas.
  Necesita un destructor para liberar la memoria de las variables privadas.
  Square no necesitará constructor ni destructor porque utilizan los de la clase base.
Clase base:
  Creación
    Utilizamos los menús para crear la clase Rect3
  Variables de dimensión
    Creamos la sección privada y añadimos los punteros que contendrán la dirección de memoria de
    los números enteros que contendrán la anchura y altura.
  Constructor
    Utilizaremos el constructor que se ha creado por defecto.
    No tendrá parámetros.
    En el archivo .cpp simplemente reservamos memoria para las que asignaremos a los punteros privados.
    Para poder comprobar que se efectívamente se llama a este constructor cuando definamos la 
    clase derivada, incluiremos una línea que muestre un mensaje en qDebug.
    Previamente hay que añadir en .cpp la referencia a la librería: #include <QDebug>
  Método de asignación de dimensiones
    Definimos el método setMeasures como público, que sólo guardará los valores pasados por
    parámetros en las variables privadas.
  Destructor
   Creamos el destructor para que libere la memoria reservada en el constructor.
   Como en el constructor, para verificar que funciona, incluimos un mensaje de debug.
  Método de cálculo de área
    Definimos en método getArea como público. Devolverá el producto de las dimensiones.
    No tiene parámetros.
  Llamada en main.cpp
    Para poder utilizar esta clase debemos añadir a main.cpp esta referencia en la sección include:
      #include <rect3.h>
    Incluimos en main.cpp la creación de un objeto Rect3, la asignación de dimensiones y presentación
    del área.
Clase derivada:
  Creación
    Igual que antes, creamos una clase a través de menús.
    El nombre de la clase será Square3.
    Su clase base será Rect3
    El resto de parámetros los aceptamos.
    Añadimos en el archivo de cabecera la referencia a la clase base:
      #include <rect3.h>
  Constructor
    Tendrá un constructor sin parámetros (por defecto).
    El constructor se limitará a llamar al constructor de la clase base para que se reserve la memoria.
    Añadimos el nombre del constructor de la base después de la definición:
      Square3::Square3():Rect3()
  Destructor
    El destructor no contiene nada porque no hay nada especial que hacer.
    El destructor llama automáticamente al destructor de la clase base.
    Es necesario que exista destructor en la clase derivada para que llame al de la clase base.
  Métodos privados
    Como en el caso anterior, redefinimos el método setMeasures como privado.
  Dimensión
    Creamos un nuevo método público llamado setSide para asignar el valor del lado del cuadrado.
    Puesto que hemos indicado que el método setMeasures es privado y no lo hemos definido, nos 
    hemos quedado sin posibilidad de acceder a él desde la clase derivada. Por eso lo llamamos
    haciendo referencia a la clase base.
  Llamadas en main.cpp
    Incluimos la llamada a la definición de la clase: #include <square3.h>
    Creamos un objeto Square3, asignamos el valor del lado y mostramos su área.
    Para comprobar que el destructor también funciona añadimos un ejemplo.
    Sólo se pueden destruir objetos con delete (o cuando finaliza la llamada a una función).
    Como aquí no tenemos funciones  porque estamos poniendo los ejemplo directamente en main,
    crearemos un puntero de la clase Square3. Crearemos una nueva instancia y la asignaremos al
    puntero. Es este momento se está llamando al constructor de la clase base (Rect3).
    Asignamos valor al lado. Mostramos el área.
    Finalmente utilizamos el comando delete para liberar la memoria reservada por el puntero.
    Es entonces cuando se llama al destructor de la clase base.

Ejemplo 4:
  Rect tiene definidas las dimensiones como punteros de enteros.
  Tendrá un constructor con los parámetros de dimensión. Se encargará de reservar memoria para
  los punteros y asignar los valores.
  Tendrá destructor para liberar la memoria reservada.
  Square tendrá constructor con el parámetro de lado.
Clase base:
  Creación
    Utilizamos los menús para crear la clase Rect4
  Variables de dimensión
    Creamos la sección privada y añadimos los punteros que contendrán la dirección de memoria de
    los números enteros que contendrán la anchura y altura.
  Constructor
    Modificamos el constructor por defecto incluyendo los parámetros de anchura y altura.
    En el .cpp reservamos memoria para los punteros y guardamos los parámetros en ellas.
  Destructor
   Creamos el destructor para que libere la memoria reservada en el constructor.
  Método de cálculo de área
    Definimos en método getArea como público. Devolverá el producto de las dimensiones.
    No tiene parámetros.
  Llamada en main.cpp
    Para poder utilizar esta clase debemos añadir a main.cpp esta referencia en la sección include:
      #include <rect4.h>
    Incluimos en main.cpp la creación de un objeto Rect4 asignando las dimensiones y presentación
    del área.
Clase derivada:
  Creación
    Igual que antes, creamos una clase a través de menús.
    El nombre de la clase será Square4.
    Su clase base será Rect4
    El resto de parámetros los aceptamos.
    Añadimos en el archivo de cabecera la referencia a la clase base:
      #include <rect4.h>
  Métodos privados
    Como en el caso anterior, redefinimos el método setMeasures como privado.
  Constructor
    Modificamos el constructor original para que tenga un parámetro por el que se le pase la 
    medida de lado.
    En la misma definición llamamos al constructor de Rect4 y le pasamos el lado para ambas
    dimensiones.
  Destructor
    El destructor no contiene nada porque no hay nada especial que hacer.
    El destructor llama automáticamente al destructor de la clase base.
    Es necesario que exista destructor en la clase derivada para que llame al de la clase base.
  Llamadas en main.cpp
    Incluimos la llamada a la definición de la clase: #include <square4.h>
    Creamos un objeto Square4, asignamos el valor del lado y mostramos su área.
