Tema: Prefab
Fecha: 20220324
Autor: Ramón Junquera

Un Prefab (PRE FAbricado) es un GameObject especial.
Los GameObjects instanciados de un Prefab, mantienen todas sus propiedades.
Podemos modificar las propiedades de una instancia para adaptarla a nuestras necesidades.
Pero si las modificaciones las hacemos sobre el Prefab, automáticamente se reflejarán en todas
sus instancias.

Para convertir un GameObject en Prefab, sólo tenemos que arrastrarlo a la carpeta Assests/Prefabs,
que inicialmente no existe y tendremos que crear manualmente.
Para crear una instancia de un Prefab, sólo tenemos que arrastarlo de la carpeta Prefabs a la escena.

En la sección de jerarquía (Hierarchy) de se mostrarán los nombres de las instancias de Prefabs en
azul, para distinguirlos de los objetos originales.

Si modificamos las características de una instancia y finalmente las queremos conservar en el Prefab,
seleccionaremos el Prefab y en la parte superior del Inspector podemos pulsar el botón Overrides.
Tras una confirmación aplicará las características al Prefab y así a todas las instancias que existan.

En Unity se pueden crear GameObjects de manera dinámica por código, pero todos ellos deberán ser
instancias de un Prefab existente.

Cómo obtengo el objeto de un Prefab por código?
Teniendo en cuenta el entorno (desarrollo o producción), lo obtendremos de un lugar o de otro
    GameObject pfGrass;
#if DEBUG //Si estamos en el editor...
    pfGrass = AssetDatabase.LoadAssetAtPath<GameObject>("Assets/Prefabs/Grass.prefab");
#else //Si estamos en productivo...
    pfGrass = Resources.Load<GameObject>("Prefabs/Grass");
#endif

Atención. El comando AssetDatabase pertenece a la librería UnityEditor que es obligatorio añadir con:
  using UnityEditor;

Cómo puedo crear una nueva instancia de un Prefab?
Una vez que tenemos una referencia al objeto de Prefab, con el comando Instantiate:
  Instantiate(Prefab);
Tenemos otra variante que nos permite crear una nueva instancia de un prefab y asignarle un GameObject padre:
  Instantiate(Prefab, Transform parent);
Ejemplo:
  GameObject ultimoCespedCreado = Instantiate(pfGrass, nivel.transform);
El significado de los parámetros es:
  1. Objeto Prefab del que crearemos la nueva instancia
  2. Transform del padre. Parámetro opcional.

Tenemos una tercera sintaxis para Instantiate:
  Instantiate(Prefab, Vector3 position, Quaternion rotation, Transform parent);
Ejemplo:
  Transform cloneObject = Instantiate(projectilePrefab, transform.position, Quaternion.identity, nivel.transform);
El significado de los parámetros es:
  1. Objeto Prefab del que crearemos la nueva instancia
  2. Posición del nuevo objeto (un vector)
  3. Orientación del nuevo objeto (Quaternion)
  4. Transform del padre. Parámetro opcional.

Quaternion.identity es el objeto sin ninguna rotación. Perfectamente alineado con los ejes.
Ejemplo:
  Start {
    transform.rotation=Quaternion.identity; //Inicializa el objeto eliminando cualquier rotación previa
  }


