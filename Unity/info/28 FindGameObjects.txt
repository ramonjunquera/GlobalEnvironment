Tema: FindGameObjects
Fecha: 20220312
Autor: Ramón Junquera

El método GameObject.Find("nombre de GameObject") devuelve el objeto buscado, siempre y cuando el
objeto esté activo.
Si tenemos objetos desactivados porque tenemos intención de activarlos en tiempo de ejecución, Find
no los encontrará.
En estos casos se debe recorrer el listado completo de objetos (activados o no) e ir comprobando
uno a uno si es el que buscamos.
Restingiremos la búsqueda sólo a GameObjects.
El listado completo nos lo da: Resources.FindObjectsOfTypeAll<GameObject>()
Después podemos buscar el objeto por nombre mediante un bucle:

  GameObject FindGameObject(string name) {
    GameObject[] gameObjects = Resources.FindObjectsOfTypeAll<GameObject>();
    foreach (GameObject go in gameObjects) if (go.name == name) return go;
    return null;
  }

O utilizando las facilidades que nos ofrece Linq.
Para ello es imprescindible incluir en cabecera la librería : using System.Linq;

  GameObject FindGameObject(string name) {
    return Resources.FindObjectsOfTypeAll<GameObject>().Where(go => go.name == name).FirstOrDefault(); ;
  }

En el Where estamos utilizadno una función Lambda. Función que se define en el mismo punto en el que se usa.
go (GameObject) es la variable que irá tomando el valor de todos los elementos de la lista.
=> define la condición para que un elemento sea seleccionado.
Por último, FirstOrDefault es necesario porque podría ser que no se encuentre el elemento buscado. En ese caso
obtendríamos una lista vacía, pero se tiene que devolver un GameObject.
Con el First buscaremos sólo hasta encontrar la primera coincidencia.


Nota sobre funciones de Linq.
Es muy fácil paralelizar las búsquedas con Linq, simplemente añadiendo el parámetro .AsParallel(). antes del Where