Instalación y configuración placas ESP32 con Arduino IDE

Nota.
Antes de comenzar la instalación del entorno de desarrollo de ESP32 es
conveniente instalar el driver USB para evitar problemas de comunicación,
aunque no sea imprescindible para todas las placas.

Instalación del driver USB.
Siempre se puede descargar la última versión desde la URL:
https://startingelectronics.org/articles/ESP32-WROOM-testing/
En la carpeta se puede encontrar el archivo:
CP210x_Windows_Drivers_with_Serial_Enumeration.zip
Para instalar se descomprime y en teoría es suficiente con ejecutar 
CP210xVCPInstaller_x64.exe
Pero no termina de funcionar porque no permite pasar de página.
En su lugar podemos hacer clic con el botón derecho sobre slabvcp.inf
y seleccionar "Instalar".

Los pasos generales son los siguientes:
  1. Clonamos en local la última versión del listado de tarjetas de
     Espressif (fabricante). Esto nos permitirá tener nuestra nueva
     tarjeta en la lista.
  2. Obtenermos la última versión de los drivers que gestionan el hardware
     esta lista.
  3. Abrimos el IDE de Arduino y lo configuramos
  4. Probamos el programa de ejemplo.

Instrucciones para Windows:
  1. Descargamos desde https://git-scm.com/download/win el Git que
     corresponde.
  2. Lo ejecutamos y aceptamos todas las opciones por defecto.
  3. Al finalizar la instalación, ejecutamos Git Gui.
  4. Seleccionamos la opción de clonar un repositorio existente (clone
     Existing Repository).
  5. Como "Source Location" tomamos:
     https://github.com/espressif/arduino-esp32.git
  6. Como "target Directory" tomamos:
     C:/Users/[YOUR_USER_NAME]/Documents/Arduino/hardware/espressif/esp32
  7. Pulsamos el botón Clone y esperamos a que lo descargue.
  8. Cerramos el Git Gui.
  9. Ejecutamos C:\Users\[YOUR_USER_NAME]\Documents\Arduino\hardware\espressif\esp32\tools\get.exe
     y esperamos a que finalice.
  10. Abrimos el IDE de Arduino.
  11. En Herramientas/Placa podemos encontrar el listado de tarjetas ESP32.
      Seleccionamos la nuestra.
  12. Seleccionamos el puerto que corresponda.
  13. Compilamos y transferimos un programa de ejemplo.

Instrucciones para linux:
http://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-mac-and-linux-instructions/

  1.Instalamos GIT y Python (aunque normalmente ya están instalados):
    sudo usermod -a -G dialout $USER
    sudo apt-get install git
    wget https://bootstrap.pypa.io/get-pip.py
    sudo python get-pip.py
    sudo pip install pyserial
  2.Nos movemos a la carpeta de hardware de la versión de Arduino que
    tenemos instalada:
      cd /usr/share/arduino-1.8.5/hardware
  3.Creamos una nueva carpeta llamada espressif
      mkdir espressif
  4.Entramos en ella
      cd espressif
  5.Clonamos la carpeta con la última versión publicada sobre estas
    placas y la instalamos:
      git clone https://github.com/espressif/arduino-esp32.git esp32
      cd esp32/tools/
      python get.py
  6.Si volvemos a abrir Arduino IDE comprobaremos que tenemos una nueva
    sección de placas de la familia ESP32

Nota 1:
  Habitualmente no se instalan las librerías de gestión de BLE (Bluetooth Low Energy).
  La razón es porque no están desarrolladas por el equipo de Espressif, sino por Neil Kolban.
  Si comprobamos en GitHub la sección de librerías:
    https://github.com/espressif/arduino-esp32/tree/master/libraries
  Comprobamos que las librerías de BLE referencian a un link de otro proyecto GitHub.
  Hacemos click en el enlace (por ejemplo BLE @ 7951347) que nos lleva a la librería correcta en:
    https://github.com/nkolban/ESP32_BLE_Arduino
  Aquí la descargamos pulsando el botón de "Clone or download".
  La descomprimimos y copiamos su contenido a la carpeta correspondiente
    (/usr/share/arduino-1.8.5/hardware/espressif/esp32/libraries/BLE)
  El path completo debería quedar como:
    /usr/share/arduino-1.8.5/hardware/espressif/esp32/libraries/BLE/src
  Además de las librerías, también se incluyes varios ejemplos de uso.

Nota 2:
  Ocurre lo mismo con las librerías de AzureIOT.
  Se resuelve igual.
  Vamos a la dirección: 
    https://github.com/VSChina/ESP32_AzureIoT_Arduino
  Descargamos los fuentes, los descomprimimos y los copiamos en la carpeta:
    /usr/share/arduino-1.8.5/hardware/espressif/esp32/libraries/AzureIoT

Instalación de plugin data
El plugin data permite subir el contenido de la carpeta "data" que cuelga de la carpeta de
programa a SPIFFS, desde Arduino IDE.
La última versión a fecha actual es la 0.1.
Podemos descargar la última versión desde:
https://github.com/me-no-dev/arduino-esp32fs-plugin
Tenemos el archivo ESP32FS-v0.1.zip en la carpeta actual
Para instalarlo:
- Localizamos la carpeta: C:\Program Files (x86)\Arduino\tools
- Descomprimimos el archivo ESP8266FS-0.3.0.zip en ella
- Debería quedar así: C:\Program Files (x86)\Arduino\tools\ESP32FS\tool\esp32fs.jar
- La próxima vez que se abra el IDE de Arduino podremos encontrar la opción:
    Herramientas/ESP32 Sketch Data upload
Nota:
  El plugin interfiere con el monitor serie.
  El monitor serie se debe cerrar antes de utilizar el plugin.