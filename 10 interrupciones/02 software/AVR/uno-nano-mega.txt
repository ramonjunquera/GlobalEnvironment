Interrupciones por software (timers) en Arduino UNO, Nano y Mega

Una interrupción interna o timer es un contador que tras alcanzar un valor límite predefinido, llama
a la ejecución de una función.
El contador comienza siempre desde cero, y aumenta secuencialmente su valor a un ritmo que le marca el
reloj de la placa Arduino.
Los Arduino UNO, Mega o Nano tienen un reloj de 16 MHz. Quiere decir que realiza 16 millones de ciclos
en cada segundo. Por lo tanto, el contador del timer incrementa su valor 16 millones de veces por segundo.
Haciendo un cálculo rápido tenemos:
Periodo = 1 / frecuencia = 1 / 16.000.000 = 0,0000000625s = 0,0000625ms = 0,0625µs = 62,5ns
Cada 62,5 nanosegundos se aumenta el contador de la interrupción en un Arduino.

El valor más pequeño que se puede dar al límite de un contador es 1. Es decir, cada vez que de aumente
el contador, saltará la interrupción (se provocará un desbordamiento y se activará el flag del timer).
Así que podríamos lanzar la ejecución de la función de la interrupción cada 62,5 ns.
En la práctica esto no es cierto, porque la función necesita unos cuantos ciclos de reloj para poder hacer algo.
El aumento del contador es algo de lo que no tenemos que preocuparnos nosotros. Lo hace automáticamente 
el procesador. Incluso el reseteo del contador y vuelta a comenzar es automático. Nosotros nos ocuparemos
de indicarle cuántos ciclos debe contar para que salte la interrupción y algún detalle más.

El número de timers que es capaz de gestionar una placa depende de su procesador.
Un Arduino UNO o Nano (chips Atmega 168 y 328) tiene 3 timers independientes. En cambio una MEGA (Atmega 2560
tiene los 3 anteriores y 3 más (total 6).
Los timers se identifican por un número consecutivo comenzando por el 0.
El timer 0 es un temporizador de 8 bits que se encarga de hacer funcionar correctamente las funciones delay() y
millis(). Esto quiere decir que si utilizarmos este timer, las dos funciones indicadas dejarán de funcionar
correctamente.
El timer 1 es un temporizador de 16 bits utilizado por la librería servo.
El timer 2 es un temporizador de 8 bits utilizado por la función tone() y el PWM de los pines 3 y 11
Los timers 3, 4 y 5 sólo los tienen los chips Atmega 1280 y 2560 (Arduino MEGA). Son de 16 bits y funcionan de la
misma manera que el timer 1.

El número de bits de un timer indican el tamaño del máximo valor a contar.
El mayor valor que podemos almacenar en 8 bits es 2^8 -1 = 255.
Con 16 bits tenemos 2^16 -1 = 65535.

Así que con un timer de 8 bits, lo más lento que podríamos conseguir que salte una interrupción sería:
Tiempo = Periodo * ciclos = 62,5ns * 255 ~ 15.937ns ~ 16µs
Si el timer es de 16 bits:
Tiempo = Periodo * ciclos = 62,5ns * 65.535 ~ 4.095.937ns ~ 4.096µs ~ 4,1ms
Así que usando el timer más flexible (el de 16 bits), podemos consegir que la interrupción se produzca cada
4,1 milisegundos. Esto sigue siendo demasiado rápido.

Para facilitar las cosas se ha creado el concepto de prescaler. El prescaler en un número por el que se multiplica el
valor máximo del contador para tener más flexibilidad y aumentar periodo de ejecución de la función de la interrupción.
Hasta ahora, en los cálculos que habíamos hecho, suponíamos como valor de prescaler = 1.
Pero el prescaler puede tomar los siguiente valores. Para los timers de 16 bits son: 1,8,64,256 o 1024.
Gracias a esto, los 4,1ms de antes se convierten ahora en 4,1*1024 ~ 4.198ms ~ 4,2s. Esto comienza a ser un valor 
manejable.

Como ya vemos que el timer más flexible es el 1 y el impacto de utilizarlo no es demasiado (a no ser que utilicemos la
librería servo), utilizaremos timer 1 para hacer los siguientes ejemplos.
  
Un timer se programa gracias a 5 registros (5 bytes). Para el timer 1 los registros son: TCCR1A, TCCR1B, TIMSK, OCR1AH y OCR1AL
Los dos primeros se denominan TCCR =  Timer Counter Control Register
El tercero TIMSK = Timer/Counter Interrupt Mask Register
Los dos últimos son los bytes alto y bajo de un valor de 16bits llamado OCR1A.

El registro TCCR1A sirve para definir el modo de generación de la onda. No lo utilizaremos. Nos parecen correctos sus
valores de forma de onda.
El registro TCCR1B define el prescaler. Esto sí es importante para nosotros.
El registro TIMSK define si la interrupción está funcionando y si ya ha saltado.
El valor OCR1A sirve para almacenar el CTC, del que hablaremos en próximos ejercicios.

Hablemos del registro TCCR1B.
El valor por defecto de este registro es 0 (sus 8 bits a 0).
Sus 3 bits más bajos (0,1 y 2) son los que definen el prescaler.
Cada uno de esos bits tiene nombre:
  bit 0 = CS10
  bit 1 = CS11
  bit 2 = CS12
Esta es la tabla de posibles valores y su funcionalidad:

     bit   2    1    0
  Nombre CS12 CS11 CS10 Funcionalidad
           0    0    0  No clock source (Timer/Counter stopped)
           0    0    1  clock/1 (No prescaling)
           0    1    0  clock/8 (From prescaler)
           0    1    1  clock/64 (From prescaler)
           1    0    0  clock/256 (From prescaler)
           1    0    1  clock/1024 (From prescaler)
           1    1    0  External clock source on T1 pin. Clock on falling edge
           1    1    1  External clock source on T1 pin. Clock on rising edge
  
La primera de las posibilidades sirve para que el contador no incremente su valor (y no salte nunca la interrupción)
Las dos últimas no nos interesan demasiado porque sirven para utilizar un reloj externo para incrementar el contador.
  
Hablemos del registro TIMSK1.
El valor por defecto de este registro es 0 (sus 8 bits a 0).
Los bits que más nos interesan son el 0 y el 1.

El bit 0, también llamado TOIE1, es el que indica si el contador de timer debe hacer saltar la interrupción cuando
llegue al máximo valor que puede contener. 65535 para los timers de 16 bits y 255 para los de 8 bits.
  
El bit 1, también llamado OCIE1A, permite hacer saltar la interrupción aunque el contador no haya alcanzado su valor
máximo. Hablaremos de esto más adelante. Por ahora no lo utilizamos.

Calculamos los periodos de los distintos prescalers de un timer de 16 bits:
  prescaler=1    periodo=prescaler*MaxValue/frecuencia=1*65535/16000000=0,0040959375s=4,0959375ms~4,1ms
  prescaler=8    periodo=prescaler*MaxValue/frecuencia=8*65535/16000000=0,0327675s=32,7675ms~33ms
  prescaler=64   periodo=prescaler*MaxValue/frecuencia=64*65535/16000000=0,26214s~0,3s
  prescaler=256  periodo=prescaler*MaxValue/frecuencia=256*65535/16000000=1,04856s~1s
  prescaler=1024 periodo=prescaler*MaxValue/frecuencia=1024*65535/16000000=4,19424s~4,2s

Llamaremos CTC al valor en el cual el contador hace saltar la interrupción.

Hasta ahora el CTC venía definido por el la resolución del timer.
Ahora lo elegiremos nosotros, aunque seguiremos utilizando un prescaler.
El CTC nunca será superior al máximo valor que soporta el timer.

El problema viene ahora... cómo calculamos el CTC para que la interrupción se produzca transcurrido el tiempo deseado?

Las fórmulas son:
    resolución timer = prescaler / frecuencia
    CTC = (tiempo deseado / resolución timer) -1 = (tiempo deseado * frecuencia / prescaler) -1
    Nota: se le quita un ciclo al CTC porque la interrupción salta en el inicio del último ciclo. No al final.

Resumiendo. La fórmula mágica es:
    CTC = (tiempo deseado * frecuencia / prescaler) -1
    
Si queremos calcular el CTC para que un prescaler de 1024 tenga un periodo aproximado de un segundo:
    CTC = (1s * 16.000.000Hz / 1024ciclos) -1 = 15624ciclos

Ahora sólo nos falta saber dónde debemos notificar este CTC para que se tenga en cuenta.
Esto se guarda en el registro OCR1A (o en el que corresponda a cada timer).
Este registro del timer 1 es de 16 bits, así que está formado por 2 bytes: OCR1AH y OCR1AL. Pero Arduino nos facilita el trabajo
pudiendo asignar el valor de 16 bits directamente a la variable OCR1A sin necesidad de separarlo en sus dos bytes.

Para activar el modo de comparación del contador con el CTC definido necesitamos conocer un nuevo bit del registro TCCR1B.
El bit 3, también llamado WGM12, sirve para ésto.

También tendremos que recordar que debemos cambiar algo en el registro TIMSK1.
Refrescamos el significado de los bits del registro TIMSK1:
  - El bit 0 (TOIE1) se activaba cuando queríamos que el CTC fuese el máximo valor permitido (ejercicios anteriores).
    Pero ahora no es el caso. Nosotros definimos el CTC y lo guardamos el el registro OCR1A.
  - El bit 1 (OCIE1A) se debe activar cuando queremos que se tenga en cuenta el valor del registro OCR1A como CTC.
    Este en nuestro caso ahora.

En el caso de que necesitemos un periodo superior al que puede dar un mayor prescaler sin CTC, tendremos que implementar
por software un contador (CTC) adicional que sólo llame a la función que nos interesa cada ciertos ciclos.
En todos los ejercicios llamamos a este valor myCTC.

