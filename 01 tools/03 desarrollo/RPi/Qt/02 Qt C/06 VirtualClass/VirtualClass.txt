VirtualClass

Novedades:
- Uso de métodos virtuales

Descripción:
  Supongamos una clase base con un método público que es sobreescrito en una clase
  derivada.
  Al llamarlo desde la clase base, se ejecutará el original definido en la clase base.
  Y al llamarlo desde la clase derivada, se ejecutará el definido en la clase derivada.
  Es posible que alguna vez nos interese que sólo quede presente la última versión
  del método (la definida en la clase derivada) incluso cuando se llama desde la clase base.
  Para ello utilizamos la etiqueta virtual.
  Al hacerlo, internamente se crea un tabla de punteros de funciones en la que siempre 
  está el puntero a la última función definida.
Desarrollo:
  La etiqueta "virtual" se debe añadir al principio de la declaración del método en el
  archivo de cabecera. No es necesario hacerlo en el .cpp.
  La "convertir" un objeto derivado y tratarlo como base, creamos un puntero del objeto
  base y le asignamos la dirección del objeto derivado.
  En el desarrollo tenemos dos clase (BaseClass y DerivedClass).
  Hemos eliminado el constructor por defecto.
  Sólo tienen el método show() que muestra desde dónde se está ejecutando.
  En el main simplemente declaramos un objeto derivado, creamos un puntero de base y le
  asignamos la dirección del derivado. Llamamos a los métodos del objeto derivado y del
  base a través del puntero.
  Si declaramos el método show en la clase base de manera normal (sin virtual), la clase
  base mantendrá siempre su valor (no será sobreescrito).
  En cambio, si lo declaramos como virtual, al utilizar el método show desde el puntero
  de la clase base, aparecerá el método de la clase derivada.
Nota:
  Si un método se declara como virtual, no es obligatorio volver a hacerlo en una clase
  derivada. Porque hay que recordar que las clases derivadas pueden derivarse de nuevo.
