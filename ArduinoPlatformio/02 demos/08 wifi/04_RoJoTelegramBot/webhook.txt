Título: Webhook en Telegram
Autor: Ramón Junquera
Fecha: 20190511

La manera más sencilla de comprobar si hay nuevos mensajes para un bot
de Telegram es hacer una llamada al servicio web (/getupdates).
Esté método (pulling) requiere llamadas contínuas. Incluso cuando no
haya mensajes pendientes de leer.
Esto provoca un consumo de datos y CPU innecesarios en la mayoría de
los casos.
Para solventar el problema se creó el sistema de webhook.
Cuando el servidor de Telegram recibe un nuevo mensaje para un bot,
es capaz de hacer una llamada a un servidor web y entregarle el mensaje.
Así, sólo tendremos tráfico de datos cuando realmente sea necesario.
Nosotros como cliente gestor del bot, no tendremos que consultar nunca
más la existencia de mensajes nuevos.
El sistema tiene ciertas limitaciones.
- El servidor web debe ser seguro. El protocolo de comunicación es https.
  Esto implica que necesitaremos una clave privada y su correspondiente
  certificado.
- El servidor debe ser accesible desde Internet, que es donde se encuentra
  el servidor de Telegram. Suponiendo que tenemos una red local separada
  de Internet por un router, lo más sencillo es que asignemos una dirección
  ip fija (o un hostname fijo por dns) y que incluyamos en la configuración
  del router una redirección del puerto utilizado a nuestro servidor web.
- Los puertos por los que se establecerá la conexión segura está limitados
  a 80, 88, 443 y 8443.
- El certificado de nuestro servidor web seguro puede ser autofirmado. Si
  este es el caso, necesitaremos entregarle al servidor de Telegram nuestro
  certificado para que pueda asegurar que somos nosotros y no un impostor.
- El certificado debe tener como nombre la misma ip o hostname que la 
  que utilizará el servidor de Telegram para conectar con nuestro servidor.
  Si no coincide, dará un error de certificado.
- La longitud mínima de la clave privada es de 1024 bits. Si se utiliza
  una longitud inferior, nos dará un error de certificado.
- Si activamos el webhook como método de recepción de mensajes, no podremos
  hacer llamadas pulling. Ambos métodos son incompatibles entre sí.
- Cada llamada recibida en nuestro servidor sólo contendrá información
  sobre un sólo mensaje.
- Si tenemos varios mensajes pendientes por recibir, intentará enviarlos en
  el mismo orden en el que los ha recibido. Pero si tiene problemas para
  entregar alguno, lo dejará en cola para intentarlo más tarde. Esto
  provoca que si nuestro servidor o nuestras comunicaciones no son estables
  podemos recibir los mensajes en orden incorrecto.

Telegram nos proporciona herramientas para webhook: activar, desactivar y
comprobar su estado actual.
Para todas estas operaciones siempre necesitaremos el identificador de
nuestro bot.

Comencemos generando nuestra clave privada y certificado.
En todos los ejemplos desarrollados se utilizan certificados autofirmados.
Este es un ejemplo de línea de comando para generar una básico con la 
aplicación openSSL:
  openssl req -new -x509 -sha256 -days 365 -newkey rsa:1024 -nodes -subj "/C=SP/O=RoJo/CN=myserver.mydomain" -out autocert.crt -keyout private.key
Esto genera una clave privada de 1024 bits en el archivo private.key, y
un certificado con una validez de un año (365 días) en el archivo
autocert.crt.

Activación de webhook
Puesto que nosotros utilizamos certificados autofirmados, será necesario
incluir en nuestra llamada de activación el contenido del archivo del
certificado.
La manera más sencilla es con el comando curl, que facilita montar y
realizar la llamada.
Este sería un ejemplo:
  curl -F "url=https://myserver.mydomain:8443/" -F "certificate=@autocert.crt" -F "max_connections=1" https://api.telegram.org/bot456789012:AAHWE3WGVWtWJ_dp3oY7anOToTuR2do60mU/setWebhook
El comando debe ejecutarse desde la carpeta que contiene el archivo del
certificado (autocert.crt) puesto que no estamos utilizando path.
Se especifica que utilizaremos el puerto 8443. Uno de los permitidos.
Indicamos también que limitamos el número de conexiones simultáneas a 1.
Si omitimos este parámetro, el valor por defecto es 80.
Tras la palabra /bot se debe escribir el identificador del bot.
En este caso se supone que es: 456789012:AAHWE3WGVWtWJ_dp3oY7anOToTuR2do60mU
Tras lanzar la llamada, nos responderá indicando si se ha podido completar
con éxito la activación del webhook.

Desactivación de webhook
Es una simple llamada que se puede hacer desde un navegador. Por ejemplo:
  https://api.telegram.org/bot456789012:AAHWE3WGVWtWJ_dp3oY7anOToTuR2do60mU/setWebhook
Suponemos que se trata del mismo bot que en el caso de la activación

Información de webhook
También se puede hacer la llamada desde un navegador:
  https://api.telegram.org/bot456789012:AAHWE3WGVWtWJ_dp3oY7anOToTuR2do60mU/getWebhookInfo
Devuelve la siguiente información:
- Si el webhook está activo
- A qué URL está direccionado
- Si ha ocurrido algún error en la última conexión
- Cuántos mensajes pendientes tiene por entregar

Cómo borrar mensajes pendientes
Si estamos haciendo pruebas, o hemos dejado el bot abierto al público
sin atención durante un tiempo, es posible que se nos acumulen los
mensajes pendientes.
La manera más sencilla para eliminarlos es descargarlos de uno en uno.
Pero si el número de mensajes lo hace inviable, podemos probar otra cosa.
- Desactivamos webhook, si es que están activos.
- A través del comando /getupdates y sin parámetros, lanzado en un
  navegador, conseguimos el valor de update_id del último mensaje. Ejemplo:
    https://api.telegram.org/bot456789012:AAHWE3WGVWtWJ_dp3oY7anOToTuR2do60mU/getupdates
  El campo update_id tiene un número secuencial que va asignando a cada
  nuevo mensaje.
  Esta llamada no varía el número de mensajes pendientes. Sólo los muestra.
- Llamamos de nuevo a la misma URL pero con el parámetro offset, al cual se
  asignaremos un valor. Este valor indica el update_id mínimo del mensaje
  que queremos recibir, porque suponemos que ya hemos leido y procesado
  todos los anteriores. Por lo tanto este valor será el del último mensaje
  más uno.
  Un ejemplo de llamada quedaría así:
    https://api.telegram.org/bot456789012:AAHWE3WGVWtWJ_dp3oY7anOToTuR2do60mU/getUpdates?offset=500150328
- Esta llamada debería devolver un mensaje vacío: {"ok":true,"result":[]}
  Porque aun no tenemos un mensaje con ese update_id. Además acabamos de
  resetear el contador de mensajes pendientes a cero. Si repetimos la
  llamada sin el parámetro offset, deberíamos recibir la misma respuesta:
  no hay mensajes nuevos.

Verificación de recepción correcta
Cuando nuestro servidor recibe un webhook con la información de un
nuevo mensaje, espera que le enviemos una confirmación de recepción.
Si no lo hacemos, seguirá intentando enviar el mismo mensaje una y
otra vez.
La respuesta mínima que es tomada como confirmación correcta es:
  "HTTP/1.1 200 OK\r\n\r\n"
La combinación de retornos de carro y finales de línea es importante.
Ante mensajes vacíos o incorrectos (con contenido o formato inesperado)
no hace falta confirmar una correcta recepción. Simplemente se
corta la conexión sin responder.

Mensajes fantasma
Es normal que tras haber enviado todos los mensajes pendientes, recibamos
2 o 3 conexiones más vacías.

Timeout de conexiones cliente en nuestro servidor.
El servidor de Telegram necesita un tiempo mínimo para poder entregar
los datos de certificado y establecer conexión como cliente contra
nuestro servidor.
Este tiempo mínimo no parece depender de la longitud de la clave privada.
Pero sí depende del estado de las comunicaciones.
Como referencia, se podría tomar un mínimo de 430ms.

La documentación oficial acerca de los webhook de Telegram se puede
encontrar en: https://core.telegram.org/bots/webhooks