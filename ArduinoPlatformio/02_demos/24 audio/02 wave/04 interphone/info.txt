Autor: Ramón Junquera
Fecha: 20210108
Tema: Interfono bidireccional

Objetivo:
  Crear dos dispositivos con micrófono y speaker que se comuniquen entre sí para poder
  hablar como si fuese un teléfono (en tiempo real).

Descripción tcp:
  Tenemos dos maneras de comunicarlos:
  - Creando una red wifi desde uno de los dispositivos, quedando uno como cliente y otro como servidor.
  - Utilizando una red wifi existente, quedando ambos dispositivos como clientes.
  En cualquiera de los casos, es importante que los nombres de dispositivo local y remoto estén bien
  especificados (en las constantes iniciales del desarrollo).
  Las funcionalidades se separan en tareas independientes:
  - Core 0:
    - Proceso de recepción. Gestiona el servidor:
      - Atiende las nuevas conexiones de clientes
      - Cada conexión sólo envía un bloque de muestras
      - El tamaño de un bloque de muestras es constante
      - Recepciona las muestras del bloque
      - Añade el bloque a una cola de reproducción
    - Proceso de reproducción. Gestiona la cola de reproducción:
      - Se activa cuando hay algún mensaje en la cola de reproducción
      - Recupera el bloque de la cola
      - Reproduce el bloque en el speaker
    - Gestión de comunicaciones
      - Mantiene la conexión wifi (sólo en dispositivos cliente)
      - Refresca la dirección ip del otro dispositivo, por si se apaga
  - Core 1:
    - Proceso de grabación. Gestiona la grabación del micrófono:
      - Graba contínuamente bloques con las muestras obtenidas del micrófono
      - Añade cada bloque a la cola de envío
    - Proceso de envío. Gestiona la cola de envíos:
      - Se activa cuando hay algún mensaje en la cola de envíos
      - Recupera el bloque de la cola
      - Establece conexión con el servidor del otro dispositivo
      - Envía el bloque
  Aprovechamos las el led integrado (normal o RGB) para indicar si hay conexión establecida.
  A diferencia de ejemplos anteriores, hemos optimizado el sistema de conexión.
  Ya no se crea una nueva conexión por cada paquete enviado. Simplemente se establece una conexión
  y se mantiene. Si en algún momento se pierde, automáticamente se intentará recuperarla.

Descripción udp:
  Puesto que despreciamos muestras si quedan caducas en el tiempo, simplificaremos el sistema
  y mejoraremos su eficiencia.
  En vez de utilizar el protocolo tcp y crear un servidor, usaremos udp.
  Si hay paquetes que se pierden no nos preocuparemos por ello.
  Las diferencias principales sobre el desarrollo tcp son:
  - No tenemos un servidor. Simplemente comprobamos si tenemos nuevos paquetes udp.
  - Puesto que es más rápido que tcp, se reduce el tamaño de bloque a 256 muestras (en vez de 512).
    Esto hace que el delay entre grabación y reproducción se reduzca. Se puede reducir incluso más
    (128 muestras), pero comenzamos a perder paquetes por no poder atenderlos.
  - Como en tcp, es posible que no se reciba completamente el contenido de un paquete de una sóla vez.
    También utiliza el buffer de recepción. Obtendremos toda la información del paquete, teniendo en
    cuenta el timeout manualmente.
  - Cuando un paquete no se recibe completamente NO lo damos por bueno, para evitar "chasquidos" por
    los datos no recibidos (porque no perdemos el tiempo limpiando el buffer antes de reproducirlo).
    
  
