Tema: PWM en ESP32
Fecha: 20181125

ESP32 no tiene implementada la instrucción analogWrite de Arduino para poder otorgar
funcionalidades PWM a un pin.
Por el contrario, el juego de instrucciones nativas provee de un par de soluciones
que funcionan perfectamente.

PWM por SigmaDelta
  Es una colección de funciones contenidas en la librería esp32-hal-sigmadelta.h y esp32-hal-sigmadelta.c
  Esta librería es nativa.
  Tiene disponible 8 canales.
  Cada canal es un timer 8 bits de resolución (256 valores)
  En cada canal se puede configurar de manera independiente la frecuencia, el valor a partir del cual
  debe cambiar el estado y el pin al cual se asocia.
  Las funciones a través de las que se realizan estas acciones son:
    uint32_t sigmaDeltaSetup(uint8_t channel,uint32_t freq)
      Permite asignar una frecuencia a un canal. La frecuencia debe estar en el rango de 1120 a 312500Hz.
      El canal debe estar en el rango de 0 a 7.
    void sigmaDeltaWrite(uint8_t channel,uint8_t duty)
      Permite indicar el valor a partir del cual el estado cambia.
      Este valor debe estar dentro del rango de la resolución: entre 0 y 255.
    void sigmaDeltaAttachPin(uint8_t pin,uint8_t channel)
      Permite asociar un pin a un canal
  Una vez asociado el pin, se puede desasociar con:
    void sigmaDeltaDetachPin(uint8_t pin)
  Existe una función adicional para poder leer el valor actual del contador de un canal:
    uint8_t sigmaDeltaRead(uint8_t channel)

PWM por ledc
  Colección de funciones contenidas en la librería esp32-hal-ledc.h y esp32-hal-ledc.c.
  La librería es nativa.
  Tiene disponibles 16 canales.
  Cada canal es un timer de 15 bits de resolución máxima.
  La resolución es seleccionable por número de bits, entre 1 y 15. Por lo tanto el valor
  máximo del contador del timer dependerá de ello = 2^resolución-1
  distintos valores para el máximo del contador
  La frecuencia depende de la resolución y se calcula con la siguiente fórmula:
    frecuencia máxima=80000000/2^resolución
    frecuencia mínima=2^(10-resolución)
  La tabla completa es:

  res c.max f.min  f.max
  --- ----- ----- --------
   1      1  512  40000000
   2      3  256  20000000
   3      7  128  10000000
   4     15   64   5000000
   5     31   32   2500000
   6     63   16   1250000
   7    127    8    625000
   8    255    4    312500
   9    511    2    156250
  10   1023    1     78125
  11   2047    1     39062
  12   4095    1     19531
  13   8191    1      9765
  14  16383    1      4882
  15  32767    1      2441

  Podemos comprobar que la frecuencia máxima para una resolución de 8 bits es de 312500Hz.
  La misma que ofrece el sistema SigmaDelta.
  En cada canal se puede configurar de manera independiente la frecuencia, la resolución, el valor a partir
  del cual debe cambiar el estado y el pin al cual se asocia.
  Las funciones a través de las que se realizan estas acciones son:
    double ledcSetup(uint8_t channel,double freq,uint8_t resolution_bits)
      Asigna resolución y frecuencia a un canal.
      El canal debe estar en el rango de 0 a 15.
      La resolución es el número de bits de resolución del timer, entre 1 y 15.
      La frecuencia está limitada por la frecuencia máxima, definida por la resolución.
    void ledcAttachPin(uint8_t pin,uint8_t channel)
      Permite asociar un pin a un canal
    void ledcWrite(uint8_t channel,uint32_t duty)
      Permite indicar el valor a partir del cual el estado cambia.
      Este valor debe estar dentro de un rango definido por la resolución:
        Mínimo = 0
        Máximo = máximo valor del contador del timer
  Una vez asociado el pin, se puede desasociar con:
    void ledcDetachPin(uint8_t pin)
  Tenemos funciones de consulta para:
    uint32_t ledcRead(uint8_t channel)
      Permite leer el valor actual del contador de un canal
    double ledcReadFreq(uint8_t channel)
      Permite leer la frecuencia actual de una canal
  Además la librería está concebida para poder utilizarse como generador de tonos con ondas cuadradas:
    double ledcWriteTone(uint8_t channel,double freq)
      Asigna una frecuencia a un canal
    double ledcWriteNote(uint8_t channel,note_t note,uint8_t octave)
      Calcula y asigna la frecuencia a un canal en base a la nota y octava indicadas.

Comparaciones
  El método ledc tiene más resolución y número de canales.
  SigmaDelta es más exácto manteniendo frecuencias y tiempos.

Librerías
  Se ha construido una librería para cada método:
  - RoJoAnalogWriteESP32S para SigmaDelta
  - RoJoAnalogWriteESP32L para ledc
  En ambas se implementa la función analogWrite con los mismos parámetros que en Arduino:
    bool analogWrite(byte pin,byte level);

Nota
  Aunque ambos métodos son totalmente distintos, son compatibles entre sí y no se interfieren mutuamente.
