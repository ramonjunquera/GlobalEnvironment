Tema: Funcionalidad RMT
Fecha: 20220501
Autor: Ramón Junquera

Origen
En los proyectos de comunicación por luz (láser o infrarrojos) uno de los mayores problemas es el control
de los tiempos de los pulsos.
Cuanto más aumenta la velocidad de transmisión, más se reducen los tiempos de los pulsos.
Con las herramientas habituales para la activación/desactivación de pines digitales tenemos una limitación
de pulsos bastante por encima del microsegundo.
Para solventarlo y tener un control más preciso se integra en el microprocesador una nueva funcionalidad, que
es gestionada por la librería RMT (ReMoTe control).

Compatibilidad
Sólo los microprocesadores más modernos de la familia ESP32 lo integran.
La librería está disponible tanto para ESP-IDF como para Arduino.

Funcionalidad
El microprocesador dispone de varios canales independientes.
Cada canal es capaz de controlar una linea de comunicación.
Antes de comenzar se debe definir una configuración para la comunicación.
En la configuración se definirán detalles como la velocidad, la dirección (emisión o transmisión), el pin
al que asociamos el led que cambiará su estado, si se debe repetir en bucle, etc...
Una vez definida la configuración, se "instala el driver" (se activa el canal) quedando preparado para su uso.
Después sólo tenemos que pasarle la secuencia de pulsos a transmitir.
La secuencia de pulsos se entrega como un array de items de RMT.
Cada item corresponde a un pulso.
Un pulso son dos cambios de estado.
Indicamos la duración del primer estado y su nivel y la duración del segundo estado y su nivel.

Nombre de la librería
Siempre debemos añadir el siguiente include al principio de nuestro código:
  #include <driver/rmt.h>

Estructura de configuración
La estructura que mantiene la configuración de un canal es de tipo rmt_config_t:
  typedef struct {
    rmt_mode_t rmt_mode;   /*!< RMT mode: transmitter or receiver */
    rmt_channel_t channel; /*!< RMT channel */
    gpio_num_t gpio_num;   /*!< RMT GPIO number */
    uint8_t clk_div;       /*!< RMT channel counter divider */
    uint8_t mem_block_num; /*!< RMT memory block number */
    uint32_t flags;        /*!< RMT channel extra configurations, OR'd with RMT_CHANNEL_FLAGS_[*] */
    union {
        rmt_tx_config_t tx_config; /*!< RMT TX parameter */
        rmt_rx_config_t rx_config; /*!< RMT RX parameter */
    };
  } rmt_config_t;

Detalles de estructura de comunicación.
rmt_mode_t rmt_mode
  Indica la dirección de la comunicación. Sólo tenemos dos opciones:
    RMT_MODE_TX : Transmisión
    RMT_MODE_RX : Recepción
rmt_channel_t channel
  Indica el canal a utilizar. Habitualmente sólo tenemos 4 canales: RMT_CHANNEL_0, RMT_CHANNEL_1, RMT_CHANNEL_2
  RMT_CHANNEL_3.
  Algunos microprocesadores tienen 8 canales. Por compatibilidas contemplaremos sólo la existencia de 4.
  Sólo los dos primeros canales son capaces de asignar los estados a un pin.
  Por lo tanto nos limitaremos sólo a los dos primeros.
gpio_num_t gpio_num
  Indica el pin que reflejará el estado de los pulsos.
  Los valores correctos van desde GPIO_NUM_0 a GPIO_NUM_40.
  Para mejorar la flexibilidad, podríamos hacer un cast de un byte a gpio_num_t:
    byte pinLed=10;
    config.gpio_num=(gpio_num_t)pinLed;
uint8_t clk_div
  Indica el tiempo de la unidad de pulso en forma de divisor de la frecuencia de la CPU.
  El valor es un byte [1,255].
  La frecuencia de la CPU es de 80MHz.
  Si clk_div es 80, la unidad de pulso será de 1 microsegundo.
  La fórmula de cálculo es:
    unidad de pulso = clk_div/80 microsegundos
  Esta es una tabla de algunos de los valores más importantes:

    clk_div periodo(us)
    ------- -----------
       255    3.1875
       160    2
        80    1
        10    0.125
         1    0.0125
  
  Por lo tanto, el pulso más corto que podríamos producir es de 0.0125 microsegundos.
  Más que suficiente para cualquier velocidad.
uint8_t mem_block_num
  Indica el número de datos que contendrá el array de items de pulsos.
uint32_t flags
  Permite añadir parámetros adicionales a la comunicación. No lo utilizaremos
rmt_tx_config_t tx_config
  Permite añadir parámetros adicionales a la comunicación de salida. No lo utilizaremos
rmt_rx_config_t rx_config
  Permite añadir parámetros adicionales a la comunicación de entrada. No lo utilizaremos

Estructura de item de pulso
La estructura que mantiene la configuración de un pulso es de tipo rmt_item32_t:
  typedef struct {
    union {
        struct {
            uint32_t duration0 : 15;
            uint32_t level0 : 1;
            uint32_t duration1 : 15;
            uint32_t level1 : 1;
        };
        uint32_t val;
    };
  } rmt_item32_t;

Detalles de la estructura de item de pulso:
duration0 y duration1
  Sólo contemplan valores enteros de 15 bits [0,32767].
  Indican la duración del pulso (primero o segundo) en unidades de pulso definidas en la configuración
  por el parámetro cls_div.
  El pulso más pequeño que podemos generar corresponde a:
    cls_div=1->0.0125us & duration=1 -> 0.0125*1=0.0125us
  El pulso más grande lo conseguimos así:
    cls_div=255->3.1875us & duration=32767 -> 3.1875*32767=104444.8125us=104.4448125ms=0.1044448125s~0.1s
level0 y level1
  Indical el nivel del pulso. Sólo admiten los valores 0 o 1.

Gestión de items de pulso
Hemos explicado que los items de pulso deben ser almacenados en un array.
Cada elemento puede ser asignado manualmente con todas sus propiedades. Ej:
  rmt_item32_t items[1];
  items[0].duration0 =1000;
  items[0].level0 = 1;
  items[0].duration1 =2000;
  items[0].level1 = 0;
Pero se puede simplificar utilizando la siguiente nomenclatura:
  rmt_item32_t items[1];
  items[0]=(rmt_item32_t){{{1000,1,2000,0}}}; 

Aplicación de la configuración
  rmt_config_t config;
  //Completamos los distintos parámetros de la configuración
  esp_err_t errorCode=rmt_config(&config);
  if(errorCode!=ESP_OK) Serial.println(errorCode);
  
Activación del canal
Activamos el canal que se indicó en la configuración.
El primer 0 corresponde al tamaño del buffer circular de recepción. En este ejemplo suponemos que se
trata de una comunicación de salida, por lo tanto no necesitamos buffer de entrada.
El segundo 0 indica que utilizaremos los flags de interrupciones por defecto. Siempre lo haremos así.
  esp_err_t errorCode=rmt_driver_install(config.channel,0,0);
  if(errorCode!=ESP_OK) Serial.println(errorCode);

Desactivación del canal
  esp_err_t errorCode=rmt_driver_uninstall(config.channel);
  if(errorCode!=ESP_OK) Serial.println(errorCode);

Envío de items de pulso
Definición de la función:
  esp_err_t rmt_write_items(rmt_channel_t channel, const rmt_item32_t *rmt_item, int item_num, bool wait_tx_done);
Devuelve el código de error.
Parámetros:
  channel : Canal por el cual enviaremos la información. Debería coincidir con el de la configuración.
  *rmt_item : Puntero al array de items de pulso.
  item_num : Número de elementos del array.
  wait_tx_done : Debemos esperar hasta que finalice la transmisión?.
Ejemplo
Crearemosm un array de pulso de un sólo elemento. Lo definimos. Suponemos que la configuración ya está
aplicada y el canal activo.
Enviamos por el canal definido en la configuración, el array de items de pulsos, que sólo tiene un elemento y
esperaremos hasta que termine.
  rmt_item32_t pulseItems[1];
  pulseItems[0]=(rmt_item32_t){{{1000,1,2000,0}}};
  esp_err_t errorCode=rmt_write_items(config.channel,pulseItems,1,true);
  if(errorCode!=ESP_OK) Serial.println(errorCode);

Cálculo de valores de parámetros
Ahora que conocemos la duración máxima de un pulso, no encontramos con otro problema.
Dada la duración de un pulso, qué valores deberíamos tomar para clk_div & duration0 para que el error cometido
sea el mínimo?
El procedimiento es el siguiente:
  periodo = duración total del pulso
  clk_div = redondeo a entero superior de periodo*80/32767
  duration0 = parte entera de periodo/clk_div*80

Usos
Aunque el sistems fue concebido para simplifical el control de tiempo de los pulsos en el envío de señales
infrarrojas de mandos a distancia, también se le puede dar otros usos.
El más común es el control de leds Neopixel, que sólo tienen un pin de comunicaciones, pero necesitan un
estricto control de tiempo de pulso para enviar la información.

